# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		WHITE=$(tput setaf 255)
		RED=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		GREEN=$(tput setaf 190)
		PURPLE=$(tput setaf 141)
		GREY=$(tput setaf 242)
		YELLOW=$(tput setaf 190)
		CYAN=$(tput setaf 111)
	else
		WHITE=$(tput setaf 7)
		RED=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 1)
		GREY=$(tput setaf 7)
		YELLOW=$(tput setaf 3)
		CYAN=$(tput setaf 6)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	WHITE="\033[1;39m"
	RED="\033[1;31m"
	ORANGE="\033[1;33m"
	GREEN="\033[1;32m"
	PURPLE="\033[1;35m"
	GREY="\033[1;37m"
	YELLOW="\033[1;33m"
	CYAN="\033[1;36m"
	BOLD=""
	RESET="\033[m"
fi

# ref: https://github.com/mathiasbynens/dotfiles/blob/66ba9b3cc0ca1b29f04b8e39f84e5b034fdb24b6/.bash_prompt#L21-L28
function parse_git_branch() {
	# exit if not a git branch
	git rev-parse --is-inside-work-tree -q > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		return
	fi
	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)'
}

PROMPT_CHAR="\$"

# highlight the prompt when root
if [[ "${USER}" == "root" ]]; then
	PROMPT_CHAR="#"
	PROMPT_COLOR=$RED
fi

# iTerm Tab and Title Customization and prompt customization
# http://sage.ucsc.edu/xtal/iterm_tab_customization.html

# Put the string " [bash]   hostname::/full/directory/path"
# in the title bar using the command sequence
# \[\e]2;[bash]   \h::\]$PWD\[\a\]

# Put the penultimate and current directory
# in the iterm tab
# \[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]

PS1="\[\e]2;$PWD\[\a\]\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]\[${BOLD}${RED}\]\u \[$GREY\]at \[$ORANGE\]\h \[$GREY\]in \[$GREEN\]\w\[$GREY\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$GREY\]\n\[$PROMPT_COLOR\]$PROMPT_CHAR \[$RESET\]"
